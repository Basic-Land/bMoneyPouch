plugins {
    id 'java'
    id 'com.github.johnrengelman.shadow' version '7.1.2'
    id 'maven-publish'
}

group = 'bMoneyPouch'
version = '3.0'
compileJava.options.encoding = "UTF-8"
compileTestJava.options.encoding = "UTF-8"
java.sourceCompatibility = JavaVersion.VERSION_11

repositories {
    mavenLocal()
    maven { url = uri('https://oss.sonatype.org/content/groups/public/') }
    maven {
        url = uri('http://nexus.basicland.cz:8081/repository/dev-nms/')
        allowInsecureProtocol(true)
    }
    maven {
        url = uri('http://nexus.basicland.cz:8081/repository/dev-public/')
        allowInsecureProtocol(true)
    }
    maven { url = uri('https://hub.spigotmc.org/nexus/content/repositories/snapshots/') }
    maven { url = uri('https://repo.codemc.org/repository/maven-public/') }
    maven { url = uri('https://jitpack.io') }
    maven { url = uri('https://libraries.minecraft.net/') }
    maven { url = uri('https://repo.maven.apache.org/maven2/') }
    maven { url = uri('https://repo.extendedclip.com/content/repositories/placeholderapi/') }
    maven {
        url 'http://nexus.basicland.cz:8081/repository/dev-private/'
        allowInsecureProtocol = true
        credentials {
            username "dev"
            password "rtVXgxFyWkiVfU3"
        }
    }
}

dependencies {
    compileOnly 'org.jetbrains:annotations:24.0.0'

    // Bungee jars
    compileOnly 'net.md-5:bungeecord-api:1.19'

    // Spigot jars
    compileOnly 'org.spigotmc:spigot:1.16.5'
    compileOnly 'net.minecraft:server:1.16.5'

    // Plugin Hooks
    compileOnly "com.github.MilkBowl:VaultAPI:1.7"

    // BL plugins
    annotationProcessor "org.projectlombok:lombok:1.18.26"
    compileOnly 'cz.basicland:bLibs:2.0.0-WIP-b22'
}

jar {
    from {
        for (File file : new File("archive").listFiles()) {
            zipTree(file)
        }
    }
}

processResources {
    outputs.upToDateWhen { false }
    eachFile { details ->
        if (details.name.contentEquals('plugin.yml')) {
            filter { line ->
                line.replace('${project.version}', version)
            }
        }
    }
}

shadowJar {
    delete fileTree('./target/') {
        exclude archiveFileName.get()
    }
    dependsOn(jar)
    archiveClassifier.set('')
    destinationDirectory = file("./target/")
}

build {
    dependsOn shadowJar
    dependsOn publish
}

publish.shouldRunAfter shadowJar
build

publishing {
    repositories {
        mavenLocal()
    }
}
